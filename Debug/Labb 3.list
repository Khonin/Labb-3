
Labb 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000004  080033e4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  2000001c  080033fc  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000098  080033fc  00020098  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ff78  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020e2  00000000  00000000  0002ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001468  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001380  00000000  00000000  00033510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000209b0  00000000  00000000  00034890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f750  00000000  00000000  00055240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d5a8a  00000000  00000000  00064990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0013a41a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005584  00000000  00000000  0013a470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003318 	.word	0x08003318

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08003318 	.word	0x08003318

0800017c <TM1637_Delay>:
#include "SevenSeg.h"

uint8_t seg_array[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};

void TM1637_Delay()
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000182:	2300      	movs	r3, #0
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	e003      	b.n	8000190 <TM1637_Delay+0x14>
	{
		__NOP();
 8000188:	bf00      	nop
	for (int i = 0; i < 100; i++)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3301      	adds	r3, #1
 800018e:	607b      	str	r3, [r7, #4]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2b63      	cmp	r3, #99	; 0x63
 8000194:	ddf8      	ble.n	8000188 <TM1637_Delay+0xc>
	}
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001a2:	4770      	bx	lr

080001a4 <TM1637_Start>:

void TM1637_Start()
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	2108      	movs	r1, #8
 80001ac:	480a      	ldr	r0, [pc, #40]	; (80001d8 <TM1637_Start+0x34>)
 80001ae:	f000 fe97 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80001b2:	f7ff ffe3 	bl	800017c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 80001b6:	2201      	movs	r2, #1
 80001b8:	2104      	movs	r1, #4
 80001ba:	4807      	ldr	r0, [pc, #28]	; (80001d8 <TM1637_Start+0x34>)
 80001bc:	f000 fe90 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80001c0:	f7ff ffdc 	bl	800017c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2108      	movs	r1, #8
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <TM1637_Start+0x34>)
 80001ca:	f000 fe89 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80001ce:	f7ff ffd5 	bl	800017c <TM1637_Delay>
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	48000800 	.word	0x48000800

080001dc <TM1637_Stop>:

void TM1637_Stop()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2104      	movs	r1, #4
 80001e4:	4814      	ldr	r0, [pc, #80]	; (8000238 <TM1637_Stop+0x5c>)
 80001e6:	f000 fe7b 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80001ea:	f7ff ffc7 	bl	800017c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2104      	movs	r1, #4
 80001f2:	4811      	ldr	r0, [pc, #68]	; (8000238 <TM1637_Stop+0x5c>)
 80001f4:	f000 fe74 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80001f8:	f7ff ffc0 	bl	800017c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2104      	movs	r1, #4
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <TM1637_Stop+0x5c>)
 8000202:	f000 fe6d 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000206:	f7ff ffb9 	bl	800017c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	2108      	movs	r1, #8
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <TM1637_Stop+0x5c>)
 8000210:	f000 fe66 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000214:	f7ff ffb2 	bl	800017c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	2104      	movs	r1, #4
 800021c:	4806      	ldr	r0, [pc, #24]	; (8000238 <TM1637_Stop+0x5c>)
 800021e:	f000 fe5f 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000222:	f7ff ffab 	bl	800017c <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2108      	movs	r1, #8
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <TM1637_Stop+0x5c>)
 800022c:	f000 fe58 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000230:	f7ff ffa4 	bl	800017c <TM1637_Delay>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	48000800 	.word	0x48000800

0800023c <TM1637_WriteByte>:

void TM1637_WriteByte(uint8_t byte)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	for (uint8_t c = 0; c < 8; c++) {
 8000246:	2300      	movs	r3, #0
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e023      	b.n	8000294 <TM1637_WriteByte+0x58>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2104      	movs	r1, #4
 8000250:	4824      	ldr	r0, [pc, #144]	; (80002e4 <TM1637_WriteByte+0xa8>)
 8000252:	f000 fe45 	bl	8000ee0 <HAL_GPIO_WritePin>
		if ((byte & 0x01) == 0) {
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d105      	bne.n	800026c <TM1637_WriteByte+0x30>
			HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2108      	movs	r1, #8
 8000264:	481f      	ldr	r0, [pc, #124]	; (80002e4 <TM1637_WriteByte+0xa8>)
 8000266:	f000 fe3b 	bl	8000ee0 <HAL_GPIO_WritePin>
 800026a:	e004      	b.n	8000276 <TM1637_WriteByte+0x3a>
		} else {
			HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2108      	movs	r1, #8
 8000270:	481c      	ldr	r0, [pc, #112]	; (80002e4 <TM1637_WriteByte+0xa8>)
 8000272:	f000 fe35 	bl	8000ee0 <HAL_GPIO_WritePin>
		}
		byte = byte >> 1;
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	085b      	lsrs	r3, r3, #1
 800027a:	71fb      	strb	r3, [r7, #7]
		TM1637_Delay();
 800027c:	f7ff ff7e 	bl	800017c <TM1637_Delay>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	2104      	movs	r1, #4
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <TM1637_WriteByte+0xa8>)
 8000286:	f000 fe2b 	bl	8000ee0 <HAL_GPIO_WritePin>
		TM1637_Delay();
 800028a:	f7ff ff77 	bl	800017c <TM1637_Delay>
	for (uint8_t c = 0; c < 8; c++) {
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	3301      	adds	r3, #1
 8000292:	73fb      	strb	r3, [r7, #15]
 8000294:	7bfb      	ldrb	r3, [r7, #15]
 8000296:	2b07      	cmp	r3, #7
 8000298:	d9d8      	bls.n	800024c <TM1637_WriteByte+0x10>
	}

	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2108      	movs	r1, #8
 800029e:	4811      	ldr	r0, [pc, #68]	; (80002e4 <TM1637_WriteByte+0xa8>)
 80002a0:	f000 fe1e 	bl	8000ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2104      	movs	r1, #4
 80002a8:	480e      	ldr	r0, [pc, #56]	; (80002e4 <TM1637_WriteByte+0xa8>)
 80002aa:	f000 fe19 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80002ae:	f7ff ff65 	bl	800017c <TM1637_Delay>
	while(HAL_GPIO_ReadPin(SEG_DAT_GPIO_Port, SEG_DAT_Pin) == GPIO_PIN_SET)
 80002b2:	bf00      	nop
 80002b4:	2108      	movs	r1, #8
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <TM1637_WriteByte+0xa8>)
 80002b8:	f000 fdfa 	bl	8000eb0 <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d0f8      	beq.n	80002b4 <TM1637_WriteByte+0x78>
		;
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2108      	movs	r1, #8
 80002c6:	4807      	ldr	r0, [pc, #28]	; (80002e4 <TM1637_WriteByte+0xa8>)
 80002c8:	f000 fe0a 	bl	8000ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2104      	movs	r1, #4
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <TM1637_WriteByte+0xa8>)
 80002d2:	f000 fe05 	bl	8000ee0 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80002d6:	f7ff ff51 	bl	800017c <TM1637_Delay>
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	48000800 	.word	0x48000800

080002e8 <TM1637_WriteCommand>:


void TM1637_WriteCommand(uint8_t cmd)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	TM1637_Start();
 80002f2:	f7ff ff57 	bl	80001a4 <TM1637_Start>
	TM1637_WriteByte(cmd);
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff9f 	bl	800023c <TM1637_WriteByte>
	TM1637_Stop();
 80002fe:	f7ff ff6d 	bl	80001dc <TM1637_Stop>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <TM1637_WriteData>:

void TM1637_WriteData(uint8_t addr,uint8_t data)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	af00      	add	r7, sp, #0
 8000310:	4603      	mov	r3, r0
 8000312:	460a      	mov	r2, r1
 8000314:	71fb      	strb	r3, [r7, #7]
 8000316:	4613      	mov	r3, r2
 8000318:	71bb      	strb	r3, [r7, #6]
	TM1637_Start();
 800031a:	f7ff ff43 	bl	80001a4 <TM1637_Start>
	TM1637_WriteByte(addr);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff8b 	bl	800023c <TM1637_WriteByte>
	TM1637_WriteByte(data);
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff87 	bl	800023c <TM1637_WriteByte>
	TM1637_Stop();
 800032e:	f7ff ff55 	bl	80001dc <TM1637_Stop>
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <DisplayDigits>:

void DisplayDigits(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t colon)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4604      	mov	r4, r0
 8000344:	4608      	mov	r0, r1
 8000346:	4611      	mov	r1, r2
 8000348:	461a      	mov	r2, r3
 800034a:	4623      	mov	r3, r4
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	4603      	mov	r3, r0
 8000350:	71bb      	strb	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	717b      	strb	r3, [r7, #5]
 8000356:	4613      	mov	r3, r2
 8000358:	713b      	strb	r3, [r7, #4]
	TM1637_WriteCommand(0x44);
 800035a:	2044      	movs	r0, #68	; 0x44
 800035c:	f7ff ffc4 	bl	80002e8 <TM1637_WriteCommand>
    TM1637_WriteData(0xc0,seg_array[d1]);
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <DisplayDigits+0x88>)
 8000364:	5cd3      	ldrb	r3, [r2, r3]
 8000366:	4619      	mov	r1, r3
 8000368:	20c0      	movs	r0, #192	; 0xc0
 800036a:	f7ff ffce 	bl	800030a <TM1637_WriteData>
   	if(colon)
 800036e:	7e3b      	ldrb	r3, [r7, #24]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00a      	beq.n	800038a <DisplayDigits+0x4e>
   		  TM1637_WriteData(0xc1,seg_array[d2] | 0x80);
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <DisplayDigits+0x88>)
 8000378:	5cd3      	ldrb	r3, [r2, r3]
 800037a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	20c1      	movs	r0, #193	; 0xc1
 8000384:	f7ff ffc1 	bl	800030a <TM1637_WriteData>
 8000388:	e006      	b.n	8000398 <DisplayDigits+0x5c>
   	else
   		  TM1637_WriteData(0xc1,seg_array[d2]);
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <DisplayDigits+0x88>)
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	4619      	mov	r1, r3
 8000392:	20c1      	movs	r0, #193	; 0xc1
 8000394:	f7ff ffb9 	bl	800030a <TM1637_WriteData>
    TM1637_WriteData(0xc2, seg_array[d3]);
 8000398:	797b      	ldrb	r3, [r7, #5]
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <DisplayDigits+0x88>)
 800039c:	5cd3      	ldrb	r3, [r2, r3]
 800039e:	4619      	mov	r1, r3
 80003a0:	20c2      	movs	r0, #194	; 0xc2
 80003a2:	f7ff ffb2 	bl	800030a <TM1637_WriteData>
  	TM1637_WriteData(0xc3, seg_array[d4]);
 80003a6:	793b      	ldrb	r3, [r7, #4]
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <DisplayDigits+0x88>)
 80003aa:	5cd3      	ldrb	r3, [r2, r3]
 80003ac:	4619      	mov	r1, r3
 80003ae:	20c3      	movs	r0, #195	; 0xc3
 80003b0:	f7ff ffab 	bl	800030a <TM1637_WriteData>
    TM1637_WriteCommand(0x8a);
 80003b4:	208a      	movs	r0, #138	; 0x8a
 80003b6:	f7ff ff97 	bl	80002e8 <TM1637_WriteCommand>

}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd90      	pop	{r4, r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000004 	.word	0x20000004

080003c8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4013      	ands	r3, r2
 80003ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ec:	68fb      	ldr	r3, [r7, #12]
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a1c      	ldr	r2, [pc, #112]	; (800047c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d12f      	bne.n	800046e <HAL_TIM_PeriodElapsedCallback+0x72>
		if(++sec1>9){
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	4a1a      	ldr	r2, [pc, #104]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b09      	cmp	r3, #9
 800041e:	dd07      	ble.n	8000430 <HAL_TIM_PeriodElapsedCallback+0x34>
			sec1=0;
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
			sec10++;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800042e:	6013      	str	r3, [r2, #0]
		}
		if(sec10 > 5){
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b05      	cmp	r3, #5
 8000436:	dd07      	ble.n	8000448 <HAL_TIM_PeriodElapsedCallback+0x4c>
			min1++;
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000440:	6013      	str	r3, [r2, #0]
			sec10 = 0;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
		}
		if(min1 > 9)
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b09      	cmp	r3, #9
 800044e:	dd07      	ble.n	8000460 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			min10++;
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	4a0d      	ldr	r2, [pc, #52]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000458:	6013      	str	r3, [r2, #0]
			min1=0;
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
		}
		if(min10>5)
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b05      	cmp	r3, #5
 8000466:	dd02      	ble.n	800046e <HAL_TIM_PeriodElapsedCallback+0x72>
			min10=0;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]

	}


}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40012c00 	.word	0x40012c00
 8000480:	20000038 	.word	0x20000038
 8000484:	2000003c 	.word	0x2000003c
 8000488:	20000040 	.word	0x20000040
 800048c:	20000044 	.word	0x20000044

08000490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000496:	f000 fa05 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049a:	f000 f813 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049e:	f000 f8db 	bl	8000658 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004a2:	f000 f885 	bl	80005b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <main+0x30>)
 80004a8:	f002 fb30 	bl	8002b0c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		DisplayDigits(2,4,5,6,1);
 80004ac:	2301      	movs	r3, #1
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2306      	movs	r3, #6
 80004b2:	2205      	movs	r2, #5
 80004b4:	2104      	movs	r1, #4
 80004b6:	2002      	movs	r0, #2
 80004b8:	f7ff ff40 	bl	800033c <DisplayDigits>
 80004bc:	e7f6      	b.n	80004ac <main+0x1c>
 80004be:	bf00      	nop
 80004c0:	20000048 	.word	0x20000048

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b0ae      	sub	sp, #184	; 0xb8
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ce:	2248      	movs	r2, #72	; 0x48
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 ff18 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2250      	movs	r2, #80	; 0x50
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 ff08 	bl	8003308 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f8:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <SystemClock_Config+0xe8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000500:	4a2a      	ldr	r2, [pc, #168]	; (80005ac <SystemClock_Config+0xe8>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000506:	6013      	str	r3, [r2, #0]
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <SystemClock_Config+0xe8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000514:	2322      	movs	r3, #34	; 0x22
 8000516:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051e:	2301      	movs	r3, #1
 8000520:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000524:	2340      	movs	r3, #64	; 0x40
 8000526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800052a:	2300      	movs	r3, #0
 800052c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000530:	2360      	movs	r3, #96	; 0x60
 8000532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f861 	bl	8001608 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800054c:	f000 f8aa 	bl	80006a4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000550:	236f      	movs	r3, #111	; 0x6f
 8000552:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000554:	2300      	movs	r3, #0
 8000556:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fbd4 	bl	8001d20 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800057e:	f000 f891 	bl	80006a4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000586:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800058c:	2310      	movs	r3, #16
 800058e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f001 ffdb 	bl	800254e <HAL_RCCEx_PeriphCLKConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800059e:	f000 f881 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005a2:	bf00      	nop
 80005a4:	37b8      	adds	r7, #184	; 0xb8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	58000400 	.word	0x58000400

080005b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <MX_TIM1_Init+0xa4>)
 80005d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3200;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005e4:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80005e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005fe:	f002 fa2d 	bl	8002a5c <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000608:	f000 f84c 	bl	80006a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_TIM1_Init+0xa0>)
 800061a:	f002 fbe4 	bl	8002de6 <HAL_TIM_ConfigClockSource>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000624:	f000 f83e 	bl	80006a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_TIM1_Init+0xa0>)
 800063a:	f002 fdc3 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000644:	f000 f82e 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000048 	.word	0x20000048
 8000654:	40012c00 	.word	0x40012c00

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	2004      	movs	r0, #4
 800066e:	f7ff feab 	bl	80003c8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_CLK_Pin|SEG_DAT_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	210c      	movs	r1, #12
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <MX_GPIO_Init+0x48>)
 8000678:	f000 fc32 	bl	8000ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG_CLK_Pin SEG_DAT_Pin */
  GPIO_InitStruct.Pin = SEG_CLK_Pin|SEG_DAT_Pin;
 800067c:	230c      	movs	r3, #12
 800067e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000680:	2311      	movs	r3, #17
 8000682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000684:	2301      	movs	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <MX_GPIO_Init+0x48>)
 8000692:	f000 fa9d 	bl	8000bd0 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	48000800 	.word	0x48000800

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x8>

080006ae <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b085      	sub	sp, #20
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <HAL_TIM_Base_MspInit+0x34>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d10b      	bne.n	800071a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000702:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000706:	f7ff ffd2 	bl	80006ae <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2019      	movs	r0, #25
 8000710:	f000 fa29 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000714:	2019      	movs	r0, #25
 8000716:	f000 fa40 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40012c00 	.word	0x40012c00

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 f8f0 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000782:	f002 fa11 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000048 	.word	0x20000048

08000790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000794:	4b24      	ldr	r3, [pc, #144]	; (8000828 <SystemInit+0x98>)
 8000796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079a:	4a23      	ldr	r2, [pc, #140]	; (8000828 <SystemInit+0x98>)
 800079c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80007b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007bc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <SystemInit+0x9c>)
 80007ca:	4013      	ands	r3, r2
 80007cc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007da:	f023 0305 	bic.w	r3, r3, #5
 80007de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <SystemInit+0xa0>)
 80007fc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80007fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <SystemInit+0xa0>)
 8000804:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000814:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	faf6fefb 	.word	0xfaf6fefb
 8000830:	22041000 	.word	0x22041000

08000834 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000834:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000836:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000838:	3304      	adds	r3, #4

0800083a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800083e:	d3f9      	bcc.n	8000834 <CopyDataInit>
  bx lr
 8000840:	4770      	bx	lr

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000842:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000844:	3004      	adds	r0, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000846:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>
  bx lr
 800084a:	4770      	bx	lr

0800084c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800084e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000850:	f7ff ff9e 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <LoopForever+0x8>)
 8000856:	490c      	ldr	r1, [pc, #48]	; (8000888 <LoopForever+0xc>)
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <LoopForever+0x10>)
 800085a:	2300      	movs	r3, #0
 800085c:	f7ff ffed 	bl	800083a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <LoopForever+0x14>)
 8000862:	490c      	ldr	r1, [pc, #48]	; (8000894 <LoopForever+0x18>)
 8000864:	2300      	movs	r3, #0
 8000866:	f7ff ffee 	bl	8000846 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopForever+0x1c>)
 800086c:	490b      	ldr	r1, [pc, #44]	; (800089c <LoopForever+0x20>)
 800086e:	2300      	movs	r3, #0
 8000870:	f7ff ffe9 	bl	8000846 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000874:	f002 fd24 	bl	80032c0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000878:	f7ff fe0a 	bl	8000490 <main>

0800087c <LoopForever>:

LoopForever:
  b LoopForever
 800087c:	e7fe      	b.n	800087c <LoopForever>
 800087e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000880:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000884:	20000004 	.word	0x20000004
 8000888:	2000001c 	.word	0x2000001c
 800088c:	080033e4 	.word	0x080033e4
  INIT_BSS _sbss, _ebss
 8000890:	2000001c 	.word	0x2000001c
 8000894:	20000098 	.word	0x20000098
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000898:	20030000 	.word	0x20030000
 800089c:	20030000 	.word	0x20030000

080008a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_Init+0x3c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <HAL_Init+0x3c>)
 80008b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ba:	2003      	movs	r0, #3
 80008bc:	f000 f948 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 f80f 	bl	80008e4 <HAL_InitTick>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	e001      	b.n	80008d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d2:	f7ff ff05 	bl	80006e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58004000 	.word	0x58004000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_InitTick+0x6c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d024      	beq.n	8000942 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f8:	f001 fbc0 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80008fc:	4602      	mov	r2, r0
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_InitTick+0x6c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000908:	fbb3 f3f1 	udiv	r3, r3, r1
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f950 	bl	8000bb6 <HAL_SYSTICK_Config>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10f      	bne.n	800093c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b0f      	cmp	r3, #15
 8000920:	d809      	bhi.n	8000936 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000922:	2200      	movs	r2, #0
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	f04f 30ff 	mov.w	r0, #4294967295
 800092a:	f000 f91c 	bl	8000b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_InitTick+0x70>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	e007      	b.n	8000946 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	e004      	b.n	8000946 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e001      	b.n	8000946 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000018 	.word	0x20000018
 8000954:	20000014 	.word	0x20000014

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000018 	.word	0x20000018
 800097c:	20000094 	.word	0x20000094

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000094 	.word	0x20000094

08000998 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTickPrio+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000014 	.word	0x20000014

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff29 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff40 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff33 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffa4 	bl	8000b0c <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bde:	e14c      	b.n	8000e7a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 813e 	beq.w	8000e74 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d00b      	beq.n	8000c18 <HAL_GPIO_Init+0x48>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d007      	beq.n	8000c18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0c:	2b11      	cmp	r3, #17
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b12      	cmp	r3, #18
 8000c16:	d130      	bne.n	8000c7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c4e:	2201      	movs	r2, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	f003 0201 	and.w	r2, r3, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0xea>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d123      	bne.n	8000d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0203 	and.w	r2, r3, #3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8098 	beq.w	8000e74 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d44:	4a54      	ldr	r2, [pc, #336]	; (8000e98 <HAL_GPIO_Init+0x2c8>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d6e:	d019      	beq.n	8000da4 <HAL_GPIO_Init+0x1d4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4a      	ldr	r2, [pc, #296]	; (8000e9c <HAL_GPIO_Init+0x2cc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d013      	beq.n	8000da0 <HAL_GPIO_Init+0x1d0>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00d      	beq.n	8000d9c <HAL_GPIO_Init+0x1cc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <HAL_GPIO_Init+0x2d4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d007      	beq.n	8000d98 <HAL_GPIO_Init+0x1c8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a47      	ldr	r2, [pc, #284]	; (8000ea8 <HAL_GPIO_Init+0x2d8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <HAL_GPIO_Init+0x1c4>
 8000d90:	2304      	movs	r3, #4
 8000d92:	e008      	b.n	8000da6 <HAL_GPIO_Init+0x1d6>
 8000d94:	2307      	movs	r3, #7
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x1d6>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x1d6>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x1d6>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x1d6>
 8000da4:	2300      	movs	r3, #0
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000db6:	4938      	ldr	r1, [pc, #224]	; (8000e98 <HAL_GPIO_Init+0x2c8>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dc4:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dea:	4a30      	ldr	r2, [pc, #192]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_GPIO_Init+0x2dc>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f47f aeab 	bne.w	8000be0 <HAL_GPIO_Init+0x10>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000c00 	.word	0x48000c00
 8000ea8:	48001000 	.word	0x48001000
 8000eac:	58000800 	.word	0x58000800

08000eb0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	887b      	ldrh	r3, [r7, #2]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e001      	b.n	8000ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
 8000eec:	4613      	mov	r3, r2
 8000eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef0:	787b      	ldrb	r3, [r7, #1]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	58000400 	.word	0x58000400

08000f30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	58000400 	.word	0x58000400

08000f4c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f5e:	d101      	bne.n	8000f64 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fbe:	d101      	bne.n	8000fc4 <LL_RCC_HSE_IsReady+0x18>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <LL_RCC_HSE_IsReady+0x1a>
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101e:	d101      	bne.n	8001024 <LL_RCC_HSI_IsReady+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_RCC_HSI_IsReady+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	061b      	lsls	r3, r3, #24
 8001046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800105e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80010a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d101      	bne.n	80010b6 <LL_RCC_HSI48_IsReady+0x18>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <LL_RCC_HSI48_IsReady+0x1a>
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800110a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800112c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d101      	bne.n	8001162 <LL_RCC_LSE_IsReady+0x18>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <LL_RCC_LSE_IsReady+0x1a>
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80011b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d101      	bne.n	80011ca <LL_RCC_LSI1_IsReady+0x18>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <LL_RCC_LSI1_IsReady+0x1a>
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b08      	cmp	r3, #8
 800122c:	d101      	bne.n	8001232 <LL_RCC_LSI2_IsReady+0x18>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <LL_RCC_LSI2_IsReady+0x1a>
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800125a:	4313      	orrs	r3, r2
 800125c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800128e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d101      	bne.n	80012be <LL_RCC_MSI_IsReady+0x16>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <LL_RCC_MSI_IsReady+0x18>
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001302:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2bb0      	cmp	r3, #176	; 0xb0
 8001308:	d901      	bls.n	800130e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800130a:	23b0      	movs	r3, #176	; 0xb0
 800130c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800134e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f023 0203 	bic.w	r2, r3, #3
 8001358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 030c 	and.w	r3, r3, #12
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4313      	orrs	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013ea:	f023 020f 	bic.w	r2, r3, #15
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800141a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014bc:	6013      	str	r3, [r2, #0]
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014da:	d101      	bne.n	80014e0 <LL_RCC_PLL_IsReady+0x18>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <LL_RCC_PLL_IsReady+0x1a>
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0303 	and.w	r3, r3, #3
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001560:	d101      	bne.n	8001566 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001586:	d101      	bne.n	800158c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d101      	bne.n	80015b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d0:	d101      	bne.n	80015d6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015f4:	d101      	bne.n	80015fa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b08d      	sub	sp, #52	; 0x34
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e37e      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8092 	beq.w	800174c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001628:	f7ff fea1 	bl	800136e <LL_RCC_GetSysClkSource>
 800162c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162e:	f7ff ff82 	bl	8001536 <LL_RCC_PLL_GetMainSource>
 8001632:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x3e>
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	2b0c      	cmp	r3, #12
 800163e:	d14c      	bne.n	80016da <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001642:	2b01      	cmp	r3, #1
 8001644:	d149      	bne.n	80016da <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001646:	f7ff fe2f 	bl	80012a8 <LL_RCC_MSI_IsReady>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_OscConfig+0x54>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e35d      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001660:	f7ff fe47 	bl	80012f2 <LL_RCC_MSI_GetRange>
 8001664:	4603      	mov	r3, r0
 8001666:	429c      	cmp	r4, r3
 8001668:	d914      	bls.n	8001694 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fd18 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e34c      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe21 	bl	80012ca <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe45 	bl	800131c <LL_RCC_MSI_SetCalibTrimming>
 8001692:	e013      	b.n	80016bc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe16 	bl	80012ca <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe3a 	bl	800131c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fcf9 	bl	80020a4 <RCC_SetFlashLatencyFromMSIRange>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e32d      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80016bc:	f000 fcde 	bl	800207c <HAL_RCC_GetHCLKFreq>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4ab3      	ldr	r2, [pc, #716]	; (8001990 <HAL_RCC_OscConfig+0x388>)
 80016c4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016c6:	4bb3      	ldr	r3, [pc, #716]	; (8001994 <HAL_RCC_OscConfig+0x38c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f90a 	bl	80008e4 <HAL_InitTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d039      	beq.n	800174a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e31e      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01e      	beq.n	8001720 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016e2:	f7ff fdc3 	bl	800126c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f94b 	bl	8000980 <HAL_GetTick>
 80016ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ee:	f7ff f947 	bl	8000980 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e30b      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001700:	f7ff fdd2 	bl	80012a8 <LL_RCC_MSI_IsReady>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f1      	beq.n	80016ee <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fddb 	bl	80012ca <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fdff 	bl	800131c <LL_RCC_MSI_SetCalibTrimming>
 800171e:	e015      	b.n	800174c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001720:	f7ff fdb3 	bl	800128a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001724:	f7ff f92c 	bl	8000980 <HAL_GetTick>
 8001728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff f928 	bl	8000980 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e2ec      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800173e:	f7ff fdb3 	bl	80012a8 <LL_RCC_MSI_IsReady>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f1      	bne.n	800172c <HAL_RCC_OscConfig+0x124>
 8001748:	e000      	b.n	800174c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d04e      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001758:	f7ff fe09 	bl	800136e <LL_RCC_GetSysClkSource>
 800175c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800175e:	f7ff feea 	bl	8001536 <LL_RCC_PLL_GetMainSource>
 8001762:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2b08      	cmp	r3, #8
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x16e>
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	d10d      	bne.n	800178c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d10a      	bne.n	800178c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001776:	f7ff fc19 	bl	8000fac <LL_RCC_HSE_IsReady>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d039      	beq.n	80017f4 <HAL_RCC_OscConfig+0x1ec>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d135      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e2c5      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d102      	bne.n	800179c <HAL_RCC_OscConfig+0x194>
 8001796:	f7ff fbeb 	bl	8000f70 <LL_RCC_HSE_Enable>
 800179a:	e001      	b.n	80017a0 <HAL_RCC_OscConfig+0x198>
 800179c:	f7ff fbf7 	bl	8000f8e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d012      	beq.n	80017ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f8ea 	bl	8000980 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff f8e6 	bl	8000980 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e2aa      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80017c2:	f7ff fbf3 	bl	8000fac <LL_RCC_HSE_IsReady>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f1      	beq.n	80017b0 <HAL_RCC_OscConfig+0x1a8>
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f8d7 	bl	8000980 <HAL_GetTick>
 80017d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d6:	f7ff f8d3 	bl	8000980 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e297      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80017e8:	f7ff fbe0 	bl	8000fac <LL_RCC_HSE_IsReady>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f1      	bne.n	80017d6 <HAL_RCC_OscConfig+0x1ce>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d051      	beq.n	80018a6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001802:	f7ff fdb4 	bl	800136e <LL_RCC_GetSysClkSource>
 8001806:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001808:	f7ff fe95 	bl	8001536 <LL_RCC_PLL_GetMainSource>
 800180c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x218>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b0c      	cmp	r3, #12
 8001818:	d113      	bne.n	8001842 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d110      	bne.n	8001842 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	f7ff fbf4 	bl	800100c <LL_RCC_HSI_IsReady>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x22e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e270      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fbf8 	bl	8001030 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	e031      	b.n	80018a6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d019      	beq.n	800187e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184a:	f7ff fbc1 	bl	8000fd0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff f897 	bl	8000980 <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff f893 	bl	8000980 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e257      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001868:	f7ff fbd0 	bl	800100c <LL_RCC_HSI_IsReady>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f1      	beq.n	8001856 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fbda 	bl	8001030 <LL_RCC_HSI_SetCalibTrimming>
 800187c:	e013      	b.n	80018a6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	f7ff fbb6 	bl	8000fee <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f87d 	bl	8000980 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff f879 	bl	8000980 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e23d      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800189c:	f7ff fbb6 	bl	800100c <LL_RCC_HSI_IsReady>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f1      	bne.n	800188a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80a3 	beq.w	8001a06 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d076      	beq.n	80019b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d046      	beq.n	8001962 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80018d4:	f7ff fc6d 	bl	80011b2 <LL_RCC_LSI1_IsReady>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d113      	bne.n	8001906 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80018de:	f7ff fc46 	bl	800116e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018e2:	f7ff f84d 	bl	8000980 <HAL_GetTick>
 80018e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80018ea:	f7ff f849 	bl	8000980 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e20d      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80018fc:	f7ff fc59 	bl	80011b2 <LL_RCC_LSI1_IsReady>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f1      	beq.n	80018ea <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001906:	f7ff fc66 	bl	80011d6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f839 	bl	8000980 <HAL_GetTick>
 800190e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001912:	f7ff f835 	bl	8000980 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b03      	cmp	r3, #3
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1f9      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001924:	f7ff fc79 	bl	800121a <LL_RCC_LSI2_IsReady>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f1      	beq.n	8001912 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fc83 	bl	800123e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001938:	f7ff fc2a 	bl	8001190 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f820 	bl	8000980 <HAL_GetTick>
 8001940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001944:	f7ff f81c 	bl	8000980 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1e0      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001956:	f7ff fc2c 	bl	80011b2 <LL_RCC_LSI1_IsReady>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f1      	bne.n	8001944 <HAL_RCC_OscConfig+0x33c>
 8001960:	e051      	b.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001962:	f7ff fc04 	bl	800116e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff f80b 	bl	8000980 <HAL_GetTick>
 800196a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800196e:	f7ff f807 	bl	8000980 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1cb      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001980:	f7ff fc17 	bl	80011b2 <LL_RCC_LSI1_IsReady>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f1      	beq.n	800196e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800198a:	f7ff fc35 	bl	80011f8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800198e:	e00c      	b.n	80019aa <HAL_RCC_OscConfig+0x3a2>
 8001990:	20000010 	.word	0x20000010
 8001994:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001998:	f7fe fff2 	bl	8000980 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1b6      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80019aa:	f7ff fc36 	bl	800121a <LL_RCC_LSI2_IsReady>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f1      	bne.n	8001998 <HAL_RCC_OscConfig+0x390>
 80019b4:	e027      	b.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80019b6:	f7ff fc1f 	bl	80011f8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7fe ffe1 	bl	8000980 <HAL_GetTick>
 80019be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80019c2:	f7fe ffdd 	bl	8000980 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1a1      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80019d4:	f7ff fc21 	bl	800121a <LL_RCC_LSI2_IsReady>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f1      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80019de:	f7ff fbd7 	bl	8001190 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7fe ffcd 	bl	8000980 <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80019ea:	f7fe ffc9 	bl	8000980 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e18d      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80019fc:	f7ff fbd9 	bl	80011b2 <LL_RCC_LSI1_IsReady>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f1      	bne.n	80019ea <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d05b      	beq.n	8001aca <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4bb5      	ldr	r3, [pc, #724]	; (8001ce8 <HAL_RCC_OscConfig+0x6e0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d114      	bne.n	8001a48 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001a1e:	f7ff fa77 	bl	8000f10 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7fe ffad 	bl	8000980 <HAL_GetTick>
 8001a26:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2a:	f7fe ffa9 	bl	8000980 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e16d      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4baa      	ldr	r3, [pc, #680]	; (8001ce8 <HAL_RCC_OscConfig+0x6e0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x44e>
 8001a50:	f7ff fb37 	bl	80010c2 <LL_RCC_LSE_Enable>
 8001a54:	e00c      	b.n	8001a70 <HAL_RCC_OscConfig+0x468>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d104      	bne.n	8001a68 <HAL_RCC_OscConfig+0x460>
 8001a5e:	f7ff fb52 	bl	8001106 <LL_RCC_LSE_EnableBypass>
 8001a62:	f7ff fb2e 	bl	80010c2 <LL_RCC_LSE_Enable>
 8001a66:	e003      	b.n	8001a70 <HAL_RCC_OscConfig+0x468>
 8001a68:	f7ff fb3c 	bl	80010e4 <LL_RCC_LSE_Disable>
 8001a6c:	f7ff fb5c 	bl	8001128 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d014      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7fe ff82 	bl	8000980 <HAL_GetTick>
 8001a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7fe ff7e 	bl	8000980 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e140      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a96:	f7ff fb58 	bl	800114a <LL_RCC_LSE_IsReady>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ef      	beq.n	8001a80 <HAL_RCC_OscConfig+0x478>
 8001aa0:	e013      	b.n	8001aca <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7fe ff6d 	bl	8000980 <HAL_GetTick>
 8001aa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe ff69 	bl	8000980 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e12b      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ac0:	f7ff fb43 	bl	800114a <LL_RCC_LSE_IsReady>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ef      	bne.n	8001aaa <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d02c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d014      	beq.n	8001b08 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ade:	f7ff fabc 	bl	800105a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7fe ff4d 	bl	8000980 <HAL_GetTick>
 8001ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aea:	f7fe ff49 	bl	8000980 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e10d      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001afc:	f7ff facf 	bl	800109e <LL_RCC_HSI48_IsReady>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f1      	beq.n	8001aea <HAL_RCC_OscConfig+0x4e2>
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b08:	f7ff fab8 	bl	800107c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7fe ff38 	bl	8000980 <HAL_GetTick>
 8001b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b14:	f7fe ff34 	bl	8000980 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0f8      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001b26:	f7ff faba 	bl	800109e <LL_RCC_HSI48_IsReady>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f1      	bne.n	8001b14 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80ee 	beq.w	8001d16 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	f7ff fc18 	bl	800136e <LL_RCC_GetSysClkSource>
 8001b3e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	f040 80af 	bne.w	8001cb0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d123      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d114      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d05d      	beq.n	8001c64 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d058      	beq.n	8001c60 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0ab      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bc0:	f7ff fc73 	bl	80014aa <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc4:	f7fe fedc 	bl	8000980 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe fed8 	bl	8000980 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e09c      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ef      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_OscConfig+0x6e4>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c04:	0212      	lsls	r2, r2, #8
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c22:	f7ff fc33 	bl	800148c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c36:	f7fe fea3 	bl	8000980 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fe9f 	bl	8000980 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e063      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ef      	beq.n	8001c3e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5e:	e05a      	b.n	8001d16 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e059      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d151      	bne.n	8001d16 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c72:	f7ff fc0b 	bl	800148c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c86:	f7fe fe7b 	bl	8000980 <HAL_GetTick>
 8001c8a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe fe77 	bl	8000980 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e03b      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ef      	beq.n	8001c8e <HAL_RCC_OscConfig+0x686>
 8001cae:	e032      	b.n	8001d16 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d02d      	beq.n	8001d12 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	f7ff fbf8 	bl	80014aa <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc4:	f023 0303 	bic.w	r3, r3, #3
 8001cc8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7fe fe4f 	bl	8000980 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	e00d      	b.n	8001d02 <HAL_RCC_OscConfig+0x6fa>
 8001ce6:	bf00      	nop
 8001ce8:	58000400 	.word	0x58000400
 8001cec:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7fe fe46 	bl	8000980 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ef      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x6e8>
 8001d10:	e001      	b.n	8001d16 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3734      	adds	r7, #52	; 0x34
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}

08001d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e12d      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d34:	4b98      	ldr	r3, [pc, #608]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d91b      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b95      	ldr	r3, [pc, #596]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4993      	ldr	r1, [pc, #588]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d52:	f7fe fe15 	bl	8000980 <HAL_GetTick>
 8001d56:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d5a:	f7fe fe11 	bl	8000980 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e111      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d1ef      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fafb 	bl	8001386 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d90:	f7fe fdf6 	bl	8000980 <HAL_GetTick>
 8001d94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d98:	f7fe fdf2 	bl	8000980 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0f2      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001daa:	f7ff fbd0 	bl	800154e <LL_RCC_IsActiveFlag_HPRE>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f1      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d016      	beq.n	8001dee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff faf2 	bl	80013ae <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dca:	f7fe fdd9 	bl	8000980 <HAL_GetTick>
 8001dce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dd2:	f7fe fdd5 	bl	8000980 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0d5      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001de4:	f7ff fbc5 	bl	8001572 <LL_RCC_IsActiveFlag_C2HPRE>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f1      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff faeb 	bl	80013da <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e04:	f7fe fdbc 	bl	8000980 <HAL_GetTick>
 8001e08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e0c:	f7fe fdb8 	bl	8000980 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0b8      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e1e:	f7ff fbbb 	bl	8001598 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f1      	beq.n	8001e0c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d016      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fae5 	bl	8001408 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e3e:	f7fe fd9f 	bl	8000980 <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e46:	f7fe fd9b 	bl	8000980 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e58:	f7ff fbb1 	bl	80015be <LL_RCC_IsActiveFlag_PPRE1>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f1      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d017      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fadb 	bl	8001430 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e7a:	f7fe fd81 	bl	8000980 <HAL_GetTick>
 8001e7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e82:	f7fe fd7d 	bl	8000980 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e07d      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e94:	f7ff fba5 	bl	80015e2 <LL_RCC_IsActiveFlag_PPRE2>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f1      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d043      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001eb2:	f7ff f87b 	bl	8000fac <LL_RCC_HSE_IsReady>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d11e      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e067      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001ec8:	f7ff fafe 	bl	80014c8 <LL_RCC_PLL_IsReady>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d113      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e05c      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ede:	f7ff f9e3 	bl	80012a8 <LL_RCC_MSI_IsReady>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d108      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e051      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001eec:	f7ff f88e 	bl	800100c <LL_RCC_HSI_IsReady>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e04a      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fa21 	bl	8001346 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7fe fd3c 	bl	8000980 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe fd38 	bl	8000980 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e036      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	f7ff fa24 	bl	800136e <LL_RCC_GetSysClkSource>
 8001f26:	4602      	mov	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d1ec      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d21b      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 0207 	bic.w	r2, r3, #7
 8001f48:	4913      	ldr	r1, [pc, #76]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f50:	f7fe fd16 	bl	8000980 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f58:	f7fe fd12 	bl	8000980 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e012      	b.n	8001f90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x278>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1ef      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f78:	f000 f880 	bl	800207c <HAL_RCC_GetHCLKFreq>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_RCC_ClockConfig+0x27c>)
 8001f80:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001f82:	f7fe fd09 	bl	8000998 <HAL_GetTickPrio>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fcab 	bl	80008e4 <HAL_InitTick>
 8001f8e:	4603      	mov	r3, r0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	58004000 	.word	0x58004000
 8001f9c:	20000010 	.word	0x20000010

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa6:	f7ff f9e2 	bl	800136e <LL_RCC_GetSysClkSource>
 8001faa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001fb2:	f7ff f99e 	bl	80012f2 <LL_RCC_MSI_GetRange>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	4a2b      	ldr	r2, [pc, #172]	; (800206c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e04b      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e045      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001fda:	f7fe ffb7 	bl	8000f4c <LL_RCC_HSE_IsEnabledDiv2>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e03a      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e037      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001ff0:	f7ff faa1 	bl	8001536 <LL_RCC_PLL_GetMainSource>
 8001ff4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d003      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x64>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d003      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x6a>
 8002002:	e00d      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002006:	60bb      	str	r3, [r7, #8]
        break;
 8002008:	e015      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800200a:	f7fe ff9f 	bl	8000f4c <LL_RCC_HSE_IsEnabledDiv2>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002016:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002018:	e00d      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_RCC_GetSysClockFreq+0xd8>)
 800201c:	60bb      	str	r3, [r7, #8]
        break;
 800201e:	e00a      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002020:	f7ff f967 	bl	80012f2 <LL_RCC_MSI_GetRange>
 8002024:	4603      	mov	r3, r0
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_RCC_GetSysClockFreq+0xcc>)
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	60bb      	str	r3, [r7, #8]
        break;
 8002034:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002036:	f7ff fa59 	bl	80014ec <LL_RCC_PLL_GetN>
 800203a:	4602      	mov	r2, r0
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	fb03 f402 	mul.w	r4, r3, r2
 8002042:	f7ff fa6c 	bl	800151e <LL_RCC_PLL_GetDivider>
 8002046:	4603      	mov	r3, r0
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	3301      	adds	r3, #1
 800204c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002050:	f7ff fa59 	bl	8001506 <LL_RCC_PLL_GetR>
 8002054:	4603      	mov	r3, r0
 8002056:	0f5b      	lsrs	r3, r3, #29
 8002058:	3301      	adds	r3, #1
 800205a:	fbb4 f3f3 	udiv	r3, r4, r3
 800205e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002060:	68fb      	ldr	r3, [r7, #12]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	0800339c 	.word	0x0800339c
 8002070:	00f42400 	.word	0x00f42400
 8002074:	003d0900 	.word	0x003d0900
 8002078:	007a1200 	.word	0x007a1200

0800207c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800207c:	b598      	push	{r3, r4, r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002080:	f7ff ff8e 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8002084:	4604      	mov	r4, r0
 8002086:	f7ff f9e7 	bl	8001458 <LL_RCC_GetAHBPrescaler>
 800208a:	4603      	mov	r3, r0
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	4a03      	ldr	r2, [pc, #12]	; (80020a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd98      	pop	{r3, r4, r7, pc}
 80020a0:	0800335c 	.word	0x0800335c

080020a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2bb0      	cmp	r3, #176	; 0xb0
 80020b0:	d903      	bls.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e007      	b.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80020ca:	f7ff f9d1 	bl	8001470 <LL_RCC_GetAHB4Prescaler>
 80020ce:	4603      	mov	r3, r0
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	4a0d      	ldr	r2, [pc, #52]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9c      	lsrs	r4, r3, #18
 80020ee:	f7fe ff1f 	bl	8000f30 <HAL_PWREx_GetVoltageRange>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4619      	mov	r1, r3
 80020f6:	4620      	mov	r0, r4
 80020f8:	f000 f80c 	bl	8002114 <RCC_SetFlashLatency>
 80020fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	bf00      	nop
 8002108:	0800339c 	.word	0x0800339c
 800210c:	0800335c 	.word	0x0800335c
 8002110:	431bde83 	.word	0x431bde83

08002114 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b093      	sub	sp, #76	; 0x4c
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <RCC_SetFlashLatency+0xf0>)
 8002120:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800212a:	4a37      	ldr	r2, [pc, #220]	; (8002208 <RCC_SetFlashLatency+0xf4>)
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	ca07      	ldmia	r2, {r0, r1, r2}
 8002132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <RCC_SetFlashLatency+0xf8>)
 8002138:	f107 040c 	add.w	r4, r7, #12
 800213c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800213e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002142:	2300      	movs	r3, #0
 8002144:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214c:	d11c      	bne.n	8002188 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800214e:	2300      	movs	r3, #0
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
 8002152:	e015      	b.n	8002180 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800215c:	4413      	add	r3, r2
 800215e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d808      	bhi.n	800217a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002170:	4413      	add	r3, r2
 8002172:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002178:	e022      	b.n	80021c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800217a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217c:	3301      	adds	r3, #1
 800217e:	643b      	str	r3, [r7, #64]	; 0x40
 8002180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002182:	2b03      	cmp	r3, #3
 8002184:	d9e6      	bls.n	8002154 <RCC_SetFlashLatency+0x40>
 8002186:	e01b      	b.n	80021c0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800218c:	e015      	b.n	80021ba <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800218e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002196:	4413      	add	r3, r2
 8002198:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d808      	bhi.n	80021b4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80021a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80021aa:	4413      	add	r3, r2
 80021ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80021b2:	e005      	b.n	80021c0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80021b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b6:	3301      	adds	r3, #1
 80021b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d9e6      	bls.n	800218e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <RCC_SetFlashLatency+0xfc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 0207 	bic.w	r2, r3, #7
 80021c8:	4911      	ldr	r1, [pc, #68]	; (8002210 <RCC_SetFlashLatency+0xfc>)
 80021ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80021d0:	f7fe fbd6 	bl	8000980 <HAL_GetTick>
 80021d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80021d6:	e008      	b.n	80021ea <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021d8:	f7fe fbd2 	bl	8000980 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e007      	b.n	80021fa <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <RCC_SetFlashLatency+0xfc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1ef      	bne.n	80021d8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	374c      	adds	r7, #76	; 0x4c
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	08003330 	.word	0x08003330
 8002208:	08003340 	.word	0x08003340
 800220c:	0800334c 	.word	0x0800334c
 8002210:	58004000 	.word	0x58004000

08002214 <LL_RCC_LSE_IsEnabled>:
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <LL_RCC_LSE_IsEnabled+0x18>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_RCC_LSE_IsEnabled+0x1a>
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_RCC_LSE_IsReady>:
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d101      	bne.n	8002250 <LL_RCC_LSE_IsReady+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_RCC_LSE_IsReady+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_RCC_SetRFWKPClockSource>:
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_RCC_SetSMPSClockSource>:
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_RCC_SetSMPSPrescaler>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	624b      	str	r3, [r1, #36]	; 0x24
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_RCC_SetUSARTClockSource>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f023 0203 	bic.w	r2, r3, #3
 80022ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_RCC_SetLPUARTClockSource>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002314:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_RCC_SetI2CClockSource>:
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_RCC_SetLPTIMClockSource>:
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	041b      	lsls	r3, r3, #16
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_RCC_SetSAIClockSource>:
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_SetRNGClockSource>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_RCC_SetCLK48ClockSource>:
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800240a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_RCC_SetUSBClockSource>:
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffe3 	bl	80023f6 <LL_RCC_SetCLK48ClockSource>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <LL_RCC_SetADCClockSource>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800244c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_RCC_SetRTCClockSource>:
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_RCC_GetRTCClockSource>:
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_ForceBackupDomainReset>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_RCC_ReleaseBackupDomainReset>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_PLLSAI1_Enable>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_RCC_PLLSAI1_Disable>:
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800251a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_RCC_PLLSAI1_IsReady>:
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800253c:	d101      	bne.n	8002542 <LL_RCC_PLLSAI1_IsReady+0x18>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b088      	sub	sp, #32
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002556:	2300      	movs	r3, #0
 8002558:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800255a:	2300      	movs	r3, #0
 800255c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d034      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002572:	d021      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002574:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002578:	d81b      	bhi.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800257a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800257e:	d01d      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002584:	d815      	bhi.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258e:	d110      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80025a0:	e00d      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f947 	bl	800283a <RCCEx_PLLSAI1_ConfigNP>
 80025ac:	4603      	mov	r3, r0
 80025ae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80025b0:	e005      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	77fb      	strb	r3, [r7, #31]
        break;
 80025b6:	e002      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80025b8:	bf00      	nop
 80025ba:	e000      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80025bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025be:	7ffb      	ldrb	r3, [r7, #31]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fee8 	bl	800239e <LL_RCC_SetSAIClockSource>
 80025ce:	e001      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
 80025d2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d046      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80025e0:	f7ff ff56 	bl	8002490 <LL_RCC_GetRTCClockSource>
 80025e4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d03c      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80025f0:	f7fe fc8e 	bl	8000f10 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff30 	bl	8002464 <LL_RCC_SetRTCClockSource>
 8002604:	e02e      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002610:	f7ff ff4b 	bl	80024aa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002614:	f7ff ff5a 	bl	80024cc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002630:	f7ff fdf0 	bl	8002214 <LL_RCC_LSE_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	2b01      	cmp	r3, #1
 8002638:	d114      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800263a:	f7fe f9a1 	bl	8000980 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002640:	e00b      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe f99d 	bl	8000980 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d902      	bls.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	77fb      	strb	r3, [r7, #31]
              break;
 8002658:	e004      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800265a:	f7ff fded 	bl	8002238 <LL_RCC_LSE_IsReady>
 800265e:	4603      	mov	r3, r0
 8002660:	2b01      	cmp	r3, #1
 8002662:	d1ee      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002664:	7ffb      	ldrb	r3, [r7, #31]
 8002666:	77bb      	strb	r3, [r7, #30]
 8002668:	e001      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fe2a 	bl	80022d8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe35 	bl	8002304 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fe5d 	bl	800236a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fe52 	bl	800236a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d004      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fe2a 	bl	8002330 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fe1f 	bl	8002330 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d022      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fe8d 	bl	8002422 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002710:	d107      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800271c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002720:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800272a:	d10b      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f8dd 	bl	80028f0 <RCCEx_PLLSAI1_ConfigNQ>
 8002736:	4603      	mov	r3, r0
 8002738:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8002740:	7ffb      	ldrb	r3, [r7, #31]
 8002742:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d02b      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d008      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002762:	d003      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe2a 	bl	80023ca <LL_RCC_SetRNGClockSource>
 8002776:	e00a      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	2000      	movs	r0, #0
 8002784:	f7ff fe21 	bl	80023ca <LL_RCC_SetRNGClockSource>
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fe34 	bl	80023f6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002796:	d107      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d022      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fe3d 	bl	8002438 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c6:	d107      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027e0:	d10b      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f8dd 	bl	80029a6 <RCCEx_PLLSAI1_ConfigNR>
 80027ec:	4603      	mov	r3, r0
 80027ee:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80027f0:	7ffb      	ldrb	r3, [r7, #31]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fd26 	bl	800225c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fd45 	bl	80022b0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fd2c 	bl	8002288 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002830:	7fbb      	ldrb	r3, [r7, #30]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002846:	f7ff fe61 	bl	800250c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800284a:	f7fe f899 	bl	8000980 <HAL_GetTick>
 800284e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002850:	e009      	b.n	8002866 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002852:	f7fe f895 	bl	8000980 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e004      	b.n	8002870 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002866:	f7ff fe60 	bl	800252a <LL_RCC_PLLSAI1_IsReady>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d137      	bne.n	80028e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288a:	4313      	orrs	r3, r2
 800288c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a0:	4313      	orrs	r3, r2
 80028a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80028a4:	f7ff fe23 	bl	80024ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a8:	f7fe f86a 	bl	8000980 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028ae:	e009      	b.n	80028c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028b0:	f7fe f866 	bl	8000980 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d902      	bls.n	80028c4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	73fb      	strb	r3, [r7, #15]
        break;
 80028c2:	e004      	b.n	80028ce <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028c4:	f7ff fe31 	bl	800252a <LL_RCC_PLLSAI1_IsReady>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d1f0      	bne.n	80028b0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d108      	bne.n	80028e6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	4313      	orrs	r3, r2
 80028e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80028fc:	f7ff fe06 	bl	800250c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002900:	f7fe f83e 	bl	8000980 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002906:	e009      	b.n	800291c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002908:	f7fe f83a 	bl	8000980 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d902      	bls.n	800291c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	73fb      	strb	r3, [r7, #15]
      break;
 800291a:	e004      	b.n	8002926 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800291c:	f7ff fe05 	bl	800252a <LL_RCC_PLLSAI1_IsReady>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d137      	bne.n	800299c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002940:	4313      	orrs	r3, r2
 8002942:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002956:	4313      	orrs	r3, r2
 8002958:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800295a:	f7ff fdc8 	bl	80024ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295e:	f7fe f80f 	bl	8000980 <HAL_GetTick>
 8002962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002964:	e009      	b.n	800297a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002966:	f7fe f80b 	bl	8000980 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d902      	bls.n	800297a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	73fb      	strb	r3, [r7, #15]
        break;
 8002978:	e004      	b.n	8002984 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800297a:	f7ff fdd6 	bl	800252a <LL_RCC_PLLSAI1_IsReady>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d1f0      	bne.n	8002966 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002998:	4313      	orrs	r3, r2
 800299a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80029b2:	f7ff fdab 	bl	800250c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80029b6:	f7fd ffe3 	bl	8000980 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80029bc:	e009      	b.n	80029d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029be:	f7fd ffdf 	bl	8000980 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	73fb      	strb	r3, [r7, #15]
      break;
 80029d0:	e004      	b.n	80029dc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80029d2:	f7ff fdaa 	bl	800252a <LL_RCC_PLLSAI1_IsReady>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d137      	bne.n	8002a52 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f6:	4313      	orrs	r3, r2
 80029f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002a10:	f7ff fd6d 	bl	80024ee <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fd ffb4 	bl	8000980 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002a1a:	e009      	b.n	8002a30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a1c:	f7fd ffb0 	bl	8000980 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a2e:	e004      	b.n	8002a3a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002a30:	f7ff fd7b 	bl	800252a <LL_RCC_PLLSAI1_IsReady>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d1f0      	bne.n	8002a1c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d108      	bne.n	8002a52 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e049      	b.n	8002b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd fe34 	bl	80006f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fa92 	bl	8002fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d001      	beq.n	8002b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e036      	b.n	8002b92 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_TIM_Base_Start_IT+0x94>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0x44>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d115      	bne.n	8002b7c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_TIM_Base_Start_IT+0x98>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d015      	beq.n	8002b8e <HAL_TIM_Base_Start_IT+0x82>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d011      	beq.n	8002b8e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7a:	e008      	b.n	8002b8e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e000      	b.n	8002b90 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	00010007 	.word	0x00010007

08002ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0202 	mvn.w	r2, #2
 8002bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9cb 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9bd 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f9ce 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0204 	mvn.w	r2, #4
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f9a1 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f993 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f9a4 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0208 	mvn.w	r2, #8
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f977 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f969 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f97a 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0210 	mvn.w	r2, #16
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f94d 	bl	8002f86 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f93f 	bl	8002f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f950 	bl	8002f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0201 	mvn.w	r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fb68 	bl	80003fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 faa0 	bl	8003298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d66:	d10e      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	d107      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa93 	bl	80032ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d10e      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d107      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f8fe 	bl	8002fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d10e      	bne.n	8002dde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d107      	bne.n	8002dde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0220 	mvn.w	r2, #32
 8002dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fa53 	bl	8003284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_ConfigClockSource+0x18>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0b5      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x184>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002e1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e28:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3a:	d03e      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xd4>
 8002e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e40:	f200 8087 	bhi.w	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	f000 8085 	beq.w	8002f56 <HAL_TIM_ConfigClockSource+0x170>
 8002e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e50:	d87f      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e52:	2b70      	cmp	r3, #112	; 0x70
 8002e54:	d01a      	beq.n	8002e8c <HAL_TIM_ConfigClockSource+0xa6>
 8002e56:	2b70      	cmp	r3, #112	; 0x70
 8002e58:	d87b      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e5a:	2b60      	cmp	r3, #96	; 0x60
 8002e5c:	d050      	beq.n	8002f00 <HAL_TIM_ConfigClockSource+0x11a>
 8002e5e:	2b60      	cmp	r3, #96	; 0x60
 8002e60:	d877      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e62:	2b50      	cmp	r3, #80	; 0x50
 8002e64:	d03c      	beq.n	8002ee0 <HAL_TIM_ConfigClockSource+0xfa>
 8002e66:	2b50      	cmp	r3, #80	; 0x50
 8002e68:	d873      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d058      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0x13a>
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d86f      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e72:	2b30      	cmp	r3, #48	; 0x30
 8002e74:	d064      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x15a>
 8002e76:	2b30      	cmp	r3, #48	; 0x30
 8002e78:	d86b      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d060      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x15a>
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d867      	bhi.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d05c      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x15a>
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d05a      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e8a:	e062      	b.n	8002f52 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f000 f972 	bl	8003184 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
      break;
 8002eb8:	e04e      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f000 f95b 	bl	8003184 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002edc:	609a      	str	r2, [r3, #8]
      break;
 8002ede:	e03b      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f000 f8cd 	bl	800308c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2150      	movs	r1, #80	; 0x50
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f926 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002efe:	e02b      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f000 f8ec 	bl	80030ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2160      	movs	r1, #96	; 0x60
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f916 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f1e:	e01b      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f000 f8ad 	bl	800308c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f906 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f3e:	e00b      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f000 f8fd 	bl	800314a <TIM_ITRx_SetConfig>
        break;
 8002f50:	e002      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <TIM_Base_SetConfig+0xbc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_Base_SetConfig+0x20>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe2:	d108      	bne.n	8002ff6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a21      	ldr	r2, [pc, #132]	; (8003080 <TIM_Base_SetConfig+0xbc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00b      	beq.n	8003016 <TIM_Base_SetConfig+0x52>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d007      	beq.n	8003016 <TIM_Base_SetConfig+0x52>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <TIM_Base_SetConfig+0xc0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_Base_SetConfig+0x52>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <TIM_Base_SetConfig+0xc4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d108      	bne.n	8003028 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <TIM_Base_SetConfig+0xbc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0xa0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <TIM_Base_SetConfig+0xc0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0xa0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <TIM_Base_SetConfig+0xc4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d103      	bne.n	800306c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	615a      	str	r2, [r3, #20]
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800

0800308c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0201 	bic.w	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f023 030a 	bic.w	r3, r3, #10
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b087      	sub	sp, #28
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0210 	bic.w	r2, r3, #16
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	031b      	lsls	r3, r3, #12
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	f043 0307 	orr.w	r3, r3, #7
 8003170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	021a      	lsls	r2, r3, #8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d8:	2302      	movs	r3, #2
 80031da:	e04a      	b.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d108      	bne.n	8003218 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800320c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a12      	ldr	r2, [pc, #72]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d10c      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40012c00 	.word	0x40012c00

08003284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4d0d      	ldr	r5, [pc, #52]	; (80032f8 <__libc_init_array+0x38>)
 80032c4:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c6:	1b64      	subs	r4, r4, r5
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	2600      	movs	r6, #0
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	4d0b      	ldr	r5, [pc, #44]	; (8003300 <__libc_init_array+0x40>)
 80032d2:	4c0c      	ldr	r4, [pc, #48]	; (8003304 <__libc_init_array+0x44>)
 80032d4:	f000 f820 	bl	8003318 <_init>
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	2600      	movs	r6, #0
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	080033dc 	.word	0x080033dc
 80032fc:	080033dc 	.word	0x080033dc
 8003300:	080033dc 	.word	0x080033dc
 8003304:	080033e0 	.word	0x080033e0

08003308 <memset>:
 8003308:	4402      	add	r2, r0
 800330a:	4603      	mov	r3, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
